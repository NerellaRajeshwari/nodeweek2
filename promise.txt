PROMISES:

The core idea behind promises is that a promise represents the result of an asynchronous operation. 
A promise is in one of three different states:
  1.pending - The initial state of a promise.
  2.fulfilled - The state of a promise representing a successful operation.
  3.rejected - The state of a promise representing a failed operation.
Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).

ADVANTAGES:

1.No inversion of control:
  Similarly to synchronous code, Promise-based functions return results, they don’t (directly) continue – and control – execution via
  callbacks. That is, the caller stays in control.
2.Chaining is simpler: 
   If the callback of then() returns a Promise then then() returns that Promise.
   As a consequence, you can chain then() method calls.
3.Error handling: 
  As we shall see later, error handling is simpler with Promises, because, once again, there isn’t an inversion of control. 
  Furthermore, both exceptions and asynchronous errors are managed the same way4.
4.Cleaner signatures: 
  With callbacks, the parameters of a function are mixed; some are input for the function, others are
  responsible for delivering its output. With Promises, function signatures become cleaner; all parameters are input.
  
EXAMPLE:

function readFile(filename, enc){
  return new Promise(function (fulfill, reject){
    fs.readFile(filename, enc, function (err, res){
      if (err) reject(err);
      else fulfill(res);
    });
  });
}
